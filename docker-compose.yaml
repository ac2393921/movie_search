version: "3.9"
services:
  # api:
  #   build:
  #     context: ./api/search_movie_api
  #     dockerfile: docker/Dockerfile
  #     target: develop
  #   volumes:
  #     - ./api/search_movie_api/:/src
  #   working_dir: "/src"
  #   tty: true
  #   ports: 
  #     - "5000:5000"
  #   restart: always
  #   depends_on:
  #     - db
  #   command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "5000"]

  be:
    build:
      context: .
      dockerfile: docker/Dockerfile
    tty: true
    ports:
      - '8080:8080'
    depends_on:
      - db
    volumes:
      - .:/src

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:8.0.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601

  db:
    image: mysql:8.0.27
    platform: linux/amd64
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: movie
      MYSQL_DATABASE: movie
      MYSQL_USER: movie
      MYSQL_PASSWORD: movie
      TZ: "Asia/Tokyo"
    ports:
      - "13306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql:/docker-entrypoint-initdb.d

  fe:
    build:
      context: ./fe
      dockerfile: docker/Dockerfile
    volumes:
      - ./fe/src:/opt/app
    ports:
      - "3000:3000"
    networks:
      - app-net

  mongo:
    container_name: mongo
    build:
      context: .
      dockerfile: docker/mongo/Dockerfile
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: user
      MONGO_REPLICA_HOST: host.docker.internal
      MONGO_REPLICA_PORT: 27017
    volumes:
      - mongoData:/app:cached
    restart: always
    networks:
      - app-net

  # mongo:
  #   # image: mongo
  #   build:
  #     context: .
  #     dockerfile: docker/mongo/Dockerfile
  #   # command: --replSet rs0
  #   container_name: mongo
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #     - "28017:28017"
  #   volumes:
  #     - ./data/mongo:/data/db
  #   networks:
  #     - app-net

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: root
    networks:
      - app-net

  auth-redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    volumes:
      - "./data/redis:/data"

  auth-api:
    build:
      context: ./api/auth
      dockerfile: docker/Dockerfile
      target: develop
    volumes:
      - ./api/auth/:/src
    working_dir: "/src"
    tty: true
    ports: 
      - "5001:5001"
    restart: always
    depends_on:
      - db
    command: ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "5001"]

volumes:
  db_data:
  mongoData:

networks:
  app-net:
    driver: bridge